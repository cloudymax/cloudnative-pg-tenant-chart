name: "cnpg"

instances: 3

bootstrap:
  initdb:
    # -- initial database to create
    database: app
    # -- owner of the initial database that is created above
    owner: app
    # secret:
    #  name: app-secret
    # list of SQL commands to run as part of the init scripts, example:
    # postInitSQL:
    #  - CREATE ROLE friend
    # Specify an external cluster to bootstrap from
  # recovery:
  #   source: clusterBackup

externalClusters: []
#  # -- name of external/existing cluster
#  - name: clusterBackup
#    barmanObjectStore:
#      destinationPath: "s3://backups"
#      endpointURL: "http://HOST:PORT"
#      s3Credentials:
#        accessKeyId:
#          # -- existing Kubernetes Secret to use for S3 access key ID
#          name: "aws-creds"
#          # -- key in Kubernetes Secret to use for S3 access key ID
#          key: "ACCESS_KEY_ID"
#        secretAccessKey:
#          # -- existing Kubernetes Secret to use for S3 secret key
#          name: "aws-creds"
#          # -- key in Kubernetes Secret to use for S3 secret key
#          key: "ACCESS_SECRET_KEY"
#      wal:
#        maxParallel: 8

backup:
  # -- how long to keep backups for
  retentionPolicy: "30d"
  barmanObjectStore:
    destinationPath: "s3://backups"
    endpointURL: "http://HOST:PORT"
    s3Credentials:
      accessKeyId:
        # -- existing Kubernetes Secret to use for S3 access key ID
        name: "aws-creds"
        # -- key in Kubernetes Secret to use for S3 access key ID
        key: "ACCESS_KEY_ID"
      secretAccessKey:
        # -- existing Kubernetes Secret to use for S3 secret key
        name: "aws-creds"
        # -- key in Kubernetes Secret to use for S3 secret key
        key: "ACCESS_SECRET_KEY"

scheduledBackup:
  # -- name to use for your scheduled backup job
  name: example-backup
  spec:
    # -- crontab style schedule to run the backups
    schedule: "0 0 0 * * *"
    backupOwnerReference: self
    cluster:
      name: pg-backup

certificates:
  server:
    # -- enable using server certificates
    enabled: false
    # -- generate server certs using cert-manager. if true the following
    # are ignored: certificates.serverTLSSecret, certificates.serverCASecret
    generate: false
    # -- name of existing Kubernetes Secret for the postgresql server TLS cert,
    # ignored if certificates.generate is true
    serverTLSSecret: ""
    # -- name of existing Kubernetes Secret for the postgresql server Certificate
    # Authority cert, ignored if certificates.generate is true
    serverCASecret: ""
  client:
    # -- enable using client certificates
    enabled: false
    # -- generate client certs using cert-manager. if true the following are
    # ignored: certificates.clientCASecret, certificates.replicationTLSSecret
    generate: false
    # -- name of existing Kubernetes Secret for the postgresql client Certificate
    # Authority cert, ignored if certificates.generate is true
    clientCASecret: ""
    # -- name of existing Kubernetes Secret for the postgresql replication TLS
    # cert ignored if certificates.generate is true
    replicationTLSSecret: ""
  user:
    # -- create a certificate for a user to connect to postgres using CertManager
    # requires server and client certificate generation enabled
    enabled: false
    # -- name of the user to create a cert for, eg: the DbOwner specified earlier.
    # This data populated into the commonName field of the certificate.
    username: "app"

monitoring:
  # -- enable monitoring via Prometheus
  enablePodMonitor: false

postgresql:
  # -- records for the pg_hba.conf file. ref: https://www.postgresql.org/docs/current/auth-pg-hba-conf.html
  pg_hba:
    - hostnossl all all 0.0.0.0/0 reject
    - hostssl all all 0.0.0.0/0 cert clientcert=verify-full

storage:
  # -- how much storage to allocate to the postgresql cluster
  size: 1Gi

testApp:
  ## -- create a test deployment to verify db connectivity.
  # Populates user and DB from the Initdb owner and database values
  # Requires server, client, and user certificate generation to be enabled.
  enabled: false
